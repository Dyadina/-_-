import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

from PyQt6.QtWidgets import (
    QApplication, QWidget, QMainWindow, QLabel, QPushButton, QFileDialog,
    QVBoxLayout, QHBoxLayout, QFrame, QTabWidget, QTextEdit, QTableWidget,
    QTableWidgetItem
)

from PyQt6.QtCore import Qt, QPoint
from PyQt6.QtGui import QPixmap, QFont, QIcon
from src.utils.visualization import plot_probabilities
from src.utils.file_utils import save_classification_result
from src.ml.inference import predict_soil_condition
from src.ml.report_utils import analyze_image, generate_report
from src.ml.report_utils import generate_html_report
from PyQt6.QtWidgets import QTextBrowser



class CustomMessage(QWidget):
    def __init__(self, message):
        super().__init__()
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint | Qt.WindowType.Popup)
        self.setStyleSheet("""
            QWidget {
                background-color: #21222c;
                border: 1px solid #6272a4;
                border-radius: 8px;
            }
            QLabel {
                color: #f8f8f2;
                font-size: 13px;
                padding: 10px;
            }
            QPushButton {
                background-color: #44475a;
                color: white;
                border-radius: 6px;
                padding: 6px 12px;
            }
            QPushButton:hover {
                background-color: #6272a4;
            }
        """)
        self.setFixedSize(300, 120)

        layout = QVBoxLayout()
        label = QLabel(message)
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        btn = QPushButton("OK")
        btn.clicked.connect(self.close)

        layout.addWidget(label)
        layout.addWidget(btn, alignment=Qt.AlignmentFlag.AlignCenter)
        self.setLayout(layout)


class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.WindowType.FramelessWindowHint)
        self.setAttribute(Qt.WidgetAttribute.WA_TranslucentBackground)

        self.resize(1000, 750)
        self.setMinimumSize(800, 500)
        self.setStyleSheet("background-color: #282a36; color: #f8f8f2;")
        self.image_path = None

        self.init_ui()

    def init_ui(self):
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        main_layout = QVBoxLayout(main_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # Header
        self.header = QFrame()
        self.header.setFixedHeight(40)
        self.header.setStyleSheet("background-color: #21222c;")
        header_layout = QHBoxLayout(self.header)
        header_layout.setContentsMargins(10, 0, 10, 0)

        self.title = QLabel("–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è —Å—Ç–∞–Ω—É “ë—Ä—É–Ω—Ç—ñ–≤")
        self.title.setFont(QFont("Segoe UI", 11))
        self.title.setStyleSheet("color: #f8f8f2;")

        btn_close = QPushButton("‚úñ")
        btn_close.clicked.connect(self.close)
        btn_close.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                color: #f8f8f2;
                font-size: 14px;
            }
            QPushButton:hover {
                background-color: #ff5555;
            }
        """)
        btn_close.setFixedSize(40, 30)

        header_layout.addWidget(self.title)
        header_layout.addStretch()
        header_layout.addWidget(btn_close)

        # Main body
        body_layout = QHBoxLayout()
        body_layout.setContentsMargins(0, 0, 0, 0)

        # Sidebar
        menu_widget = QWidget()
        menu_widget.setFixedWidth(200)
        menu_widget.setStyleSheet("background-color: #21222c;")
        menu_layout = QVBoxLayout(menu_widget)
        menu_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        font = QFont('Segoe UI', 11)

        self.btn_load = QPushButton("üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏")
        self.btn_classify = QPushButton("‚ú® –ö–ª–∞—Å–∏—Ñ—ñ–∫—É–≤–∞—Ç–∏")
        self.btn_exit = QPushButton("‚õî –í–∏–π—Ç–∏")

        for btn in [self.btn_load, self.btn_classify, self.btn_exit]:
            btn.setFont(font)
            btn.setCursor(Qt.CursorShape.PointingHandCursor)
            btn.setStyleSheet("""
                QPushButton {
                    background-color: #44475a;
                    color: #f8f8f2;
                    padding: 10px;
                    margin: 8px;
                    border: none;
                    border-radius: 6px;
                }
                QPushButton:hover {
                    background-color: #6272a4;
                }
            """)
            menu_layout.addWidget(btn)

        self.btn_load.clicked.connect(self.load_image)
        self.btn_classify.clicked.connect(self.classify_image)
        self.btn_exit.clicked.connect(self.close)

        # Central widget
        self.center_widget = QWidget()
        center_layout = QVBoxLayout(self.center_widget)

        self.label_image = QLabel("üõ∞Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Å—É–ø—É—Ç–Ω–∏–∫–æ–≤–∏–π –∑–Ω—ñ–º–æ–∫")
        self.label_image.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.label_image.setFont(QFont('Segoe UI', 14))
        self.label_image.setStyleSheet("color: #f8f8f2; margin: 20px;")

        self.result_label = QLabel("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ —Ç—É—Ç")
        self.result_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.result_label.setFont(QFont('Segoe UI', 13))
        self.result_label.setStyleSheet("color: #bd93f9; margin-top: 20px;")

        center_layout.addWidget(self.label_image)
        center_layout.addWidget(self.result_label)

        body_layout.addWidget(menu_widget)
        body_layout.addWidget(self.center_widget)

        main_layout.addWidget(self.header)

        # === Tabs ===
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #44475a;
                background-color: #282a36;
            }

            QTabBar::tab {
                background: #21222c;
                color: #f8f8f2;
                border: 1px solid #44475a;
                padding: 6px 16px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                margin-right: 4px;
            }

            QTabBar::tab:selected {
                background: #44475a;
                color: #50fa7b;
                border-bottom: 1px solid #282a36;
            }

            QTabBar::tab:hover {
                background: #6272a4;
                color: #ffffff;
            }
        """)

        # === –í–∫–ª–∞–¥–∫–∞ –ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è ===
        tab_classify = QWidget()
        tab_classify.setLayout(body_layout)

        # === –í–∫–ª–∞–¥–∫–∞ –ó–≤—ñ—Ç ===
        self.tab_report = self.create_report_tab()

        # === –î–æ–¥–∞—î–º–æ —É —Ç–∞–±–∏ ===
        self.tabs.addTab(tab_classify, "–ö–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—è")
        self.tabs.addTab(self.tab_report, "–ó–≤—ñ—Ç")

        main_layout.addWidget(self.tabs)

    def create_report_tab(self):
        tab = QWidget()
        layout = QVBoxLayout(tab)

        # HTML –±—Ä–∞—É–∑–µ—Ä ‚Äî –ø–æ–≤–Ω—ñ—Å—Ç—é –≤ —Ç–µ–º–Ω–æ–º—É —Å—Ç–∏–ª—ñ
        self.report_browser = QTextBrowser()
        self.report_browser.setOpenExternalLinks(True)
        self.report_browser.setStyleSheet("""
            QTextBrowser {
                background-color: #1e1f29;
                color: #f8f8f2;
                border: 1px solid #44475a;
                border-radius: 6px;
                padding: 8px;
            }
        """)
        self.report_browser.setMinimumHeight(100)

        # –¢–∞–±–ª–∏—Ü—è –º–µ—Ç—Ä–∏–∫
        self.metrics_table = QTableWidget(4, 2)
        self.metrics_table.setCornerButtonEnabled(False)  # –í–∏–º–∏–∫–∞—î –∫—É—Ç–æ–≤—É –∫–Ω–æ–ø–∫—É

        # üîª –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —è–∫—â–æ –Ω–µ —Ö–æ—á–µ—à –ª—ñ–≤—É –∫–æ–ª–æ–Ω–∫—É –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤)
        # self.metrics_table.verticalHeader().setVisible(False)
        self.hist_image = QLabel()
        self.hist_image.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.hist_image.setStyleSheet("background-color: #1e1f29; border: 1px solid #44475a;")
        layout.addWidget(self.hist_image)

        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.metrics_table.setHorizontalHeaderLabels(["–ú–µ—Ç—Ä–∏–∫–∞", "–ó–Ω–∞—á–µ–Ω–Ω—è"])
        self.metrics_table.setVerticalHeaderLabels(["–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", "–ö–æ–Ω—Ç—Ä–∞—Å—Ç", "–¢–µ–º–Ω—ñ –ø—ñ–∫—Å–µ–ª—ñ", "–°–≤—ñ—Ç–ª—ñ –ø—ñ–∫—Å–µ–ª—ñ"])

        # –ù–∞–ø–æ–≤–Ω—é—î–º–æ –ª—ñ–≤—É –∫–æ–ª–æ–Ω–∫—É –≤—Ä—É—á–Ω—É, —è–∫—â–æ verticalHeader –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ
        # for row, name in enumerate(["–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", "–ö–æ–Ω—Ç—Ä–∞—Å—Ç", "–¢–µ–º–Ω—ñ –ø—ñ–∫—Å–µ–ª—ñ", "–°–≤—ñ—Ç–ª—ñ –ø—ñ–∫—Å–µ–ª—ñ"]):
        #     self.metrics_table.setItem(row, 0, QTableWidgetItem(name))

        # –°—Ç–∏–ª—ñ–∑–∞—Ü—ñ—è
        self.metrics_table.setStyleSheet("""
            QTableWidget {
                background-color: #1e1f29;
                color: #f8f8f2;
                gridline-color: #44475a;
                border: 1px solid #44475a;
            }
            QHeaderView::section {
                background-color: #282a36;
                color: #ff79c6;
                padding: 4px;
            }
            QTableWidget::item {
                padding: 6px;
            }
            QTableCornerButton::section {
                background-color: #1e1f29;
                border: none;
            }
        """)

        # –ó–∞–±–æ—Ä–æ–Ω–∏—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–µ —Ç–ª–æ (—É—Å—É–≤–∞—î –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∏)
        self.metrics_table.viewport().setAttribute(Qt.WidgetAttribute.WA_NoSystemBackground, True)

        # –ü–æ–∫–∞–∑–∞—Ç–∏ —Å—ñ—Ç–∫—É
        self.metrics_table.setShowGrid(True)

        # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ (—â–æ–± –Ω–µ –±—É–ª–æ None)
        for row in range(4):
            self.metrics_table.setItem(row, 0, QTableWidgetItem(""))
            self.metrics_table.setItem(row, 1, QTableWidgetItem(""))

        # –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—ñ–º–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∞–º–∏
        for row in range(4):
            self.metrics_table.setItem(row, 0, QTableWidgetItem(""))
            self.metrics_table.setItem(row, 1, QTableWidgetItem(""))

        # –ù–∞–∑–≤–∏
        label_metrics = QLabel("üìà –ú–µ—Ç—Ä–∏–∫–∏:")
        label_metrics.setStyleSheet("color: #f8f8f2; font-weight: bold;")
        layout.addWidget(label_metrics)

        # ‚¨ÖÔ∏è‚¨ÖÔ∏è –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –±–ª–æ–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ñ –º–µ—Ç—Ä–∏–∫ + –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏
        metrics_and_plot_layout = QHBoxLayout()

        # –î–æ–¥–∞—î–º–æ —Ç–∞–±–ª–∏—Ü—é –º–µ—Ç—Ä–∏–∫
        metrics_and_plot_layout.addWidget(self.metrics_table)

        # –ì—ñ—Å—Ç–æ–≥—Ä–∞–º–∞ (—Å—Ç–≤–æ—Ä—é—î–º–æ, —è–∫—â–æ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞)
        self.hist_image = QLabel()
        self.hist_image.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.hist_image.setStyleSheet("background-color: #1e1f29; border: 1px solid #44475a;")
        self.hist_image.setFixedSize(400, 250)  # –º–æ–∂–µ—à –∑–º—ñ–Ω–∏—Ç–∏ —Ä–æ–∑–º—ñ—Ä–∏
        metrics_and_plot_layout.addWidget(self.hist_image)

        # –î–æ–¥–∞—î–º–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –±–ª–æ–∫ —É layout
        layout.addLayout(metrics_and_plot_layout)

        # –ü—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è: HTML-–∑–≤—ñ—Ç
        label_html = QLabel("üìÑ –ó–≤—ñ—Ç (HTML):")
        label_html.setStyleSheet("color: #f8f8f2; font-weight: bold;")
        layout.addWidget(label_html)
        layout.addWidget(self.report_browser)
        layout.addWidget(QLabel("üß† –Ü–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è:"))

        # –û—Å–Ω–æ–≤–Ω–∏–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∏–π –±–ª–æ–∫
        interpretation_row = QHBoxLayout()

        # –õ—ñ–≤–∞ –∫–æ–ª–æ–Ω–∫–∞
        self.explanation_box = QTextEdit()
        self.explanation_box.setMinimumHeight(200)
        self.explanation_box.setReadOnly(True)
        self.explanation_box.setStyleSheet("""
            QTextEdit {
                background-color: #1e1f29;
                color: #f8f8f2;
                font-family: Consolas, monospace;
                border: 1px solid #44475a;
                border-radius: 6px;
                padding: 10px;
                min-width: 600px;
            }
        """)
        interpretation_row.addWidget(self.explanation_box)

        # –ü—Ä–∞–≤–∞ –∫–æ–ª–æ–Ω–∫–∞ (—ñ–Ω–¥–µ–∫—Å–∏ NDVI, BSI, Brightness Index)
        self.index_box = QTextEdit()
        self.index_box.setMinimumHeight(200)
        self.index_box.setReadOnly(True)
        self.index_box.setStyleSheet("""
            QTextEdit {
                background-color: #1e1f29;
                color: #f1f1f1;
                font-family: Consolas, monospace;
                border: 1px solid #44475a;
                border-radius: 6px;
                padding: 10px;
                min-width: 300px;
            }
        """)
        interpretation_row.addWidget(self.index_box)

        # –î–æ–¥–∞—î–º–æ —É layout
        container = QWidget()
        container.setLayout(interpretation_row)
        layout.addWidget(container)

        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        self.btn_save_report = QPushButton("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç —É HTML")
        self.btn_save_report.setStyleSheet("""
            QPushButton {
                background-color: #44475a;
                color: #f8f8f2;
                padding: 10px;
                border-radius: 6px;
            }
            QPushButton:hover {
                background-color: #6272a4;
            }
        """)
        self.btn_save_report.clicked.connect(self.save_report_to_file)
        layout.addWidget(self.btn_save_report, alignment=Qt.AlignmentFlag.AlignRight)

        return tab

    def load_image(self):
        fname, _ = QFileDialog.getOpenFileName(self, "–û–±–µ—Ä—ñ—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è", "", "Images (*.png *.jpg *.jpeg)")
        if fname:
            self.image_path = fname
            pixmap = QPixmap(fname).scaled(600, 400, Qt.AspectRatioMode.KeepAspectRatio)
            self.label_image.setPixmap(pixmap)

    def classify_image(self):
        if self.image_path:
            try:
                label, probs, classes = predict_soil_condition(self.image_path)

                # üìä –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
                metrics = analyze_image(self.image_path)
                hist_path = metrics.pop("__histogram_path__", None)  # ‚¨ÖÔ∏è –í–∏–ª—É—á–∞—î–º–æ —à–ª—è—Ö –¥–æ –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏
                self.metrics_table.setRowCount(len(metrics))  # –ü—ñ–¥–ª–∞—à—Ç–æ–≤—É—î–º–æ –ø—ñ–¥ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º–µ—Ç—Ä–∏–∫

                for row, (k, v) in enumerate(metrics.items()):
                    self.metrics_table.setItem(row, 0, QTableWidgetItem(str(k)))
                    self.metrics_table.setItem(row, 1, QTableWidgetItem(str(v)))

                # üñºÔ∏è –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏ –ø—Ä–∞–≤–æ—Ä—É—á
                if hist_path:
                    pixmap = QPixmap(hist_path)
                    self.hist_image.setPixmap(pixmap.scaled(350, 250, Qt.AspectRatioMode.KeepAspectRatio))
                else:
                    self.hist_image.clear()

                # üìÑ HTML-–∑–≤—ñ—Ç
                html_report = generate_html_report(self.image_path, label, metrics)
                self.report_browser.setHtml(html_report)

                # üî¨ –ù–∞—É–∫–æ–≤–∞ —ñ–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü—ñ—è –º–µ—Ç—Ä–∏–∫
                brightness = metrics.get("–Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", 0)
                contrast = metrics.get("–ö–æ–Ω—Ç—Ä–∞—Å—Ç", 0)
                entropy_val = metrics.get("–ï–Ω—Ç—Ä–æ–ø—ñ—è", 0)
                dark = float(metrics.get("–¢–µ–º–Ω—ñ –ø—ñ–∫—Å–µ–ª—ñ", "0%").replace("%", ""))
                bright = float(metrics.get("–°–≤—ñ—Ç–ª—ñ –ø—ñ–∫—Å–µ–ª—ñ", "0%").replace("%", ""))

                explanation = ["üìä <b>–ê–Ω–∞–ª—ñ–∑ –º–µ—Ç—Ä–∏–∫:</b><br>"]
                if brightness < 50 and dark > 70:
                    explanation.append("üîª <b>–¢–µ–º–Ω–∏–π “ë—Ä—É–Ω—Ç:</b> –º–æ–∂–ª–∏–≤–∞ –≤–æ–ª–æ–≥–∞, –∑–∞–±–æ–ª–æ—á–µ–Ω–∞ –∞–±–æ —É—â—ñ–ª—å–Ω–µ–Ω–∞ –¥—ñ–ª—è–Ω–∫–∞.")
                if contrast > 35:
                    explanation.append("üî∫ <b>–í–∏—Å–æ–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç:</b> —Ä—ñ–∑–∫–µ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä (—Å—É—Ö—ñ/–≤–æ–ª–æ–≥—ñ).")
                if entropy_val > 6.5:
                    explanation.append("üåÄ <b>–í–∏—Å–æ–∫–∞ –µ–Ω—Ç—Ä–æ–ø—ñ—è:</b> —Å–∫–ª–∞–¥–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ “ë—Ä—É–Ω—Ç—É.")
                if bright > 10:
                    explanation.append("‚òÄÔ∏è <b>–°–≤—ñ—Ç–ª—ñ –ø—ñ–∫—Å–µ–ª—ñ:</b> –º–æ–∂–ª–∏–≤—ñ –ø–æ—Å—É—à–ª–∏–≤—ñ, –ø—ñ—â–∞–Ω—ñ –¥—ñ–ª—è–Ω–∫–∏.")
                if not explanation[1:]:
                    explanation.append("‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –≤–∏—è–≤–∏–ª–∏ –∞–Ω–æ–º–∞–ª—ñ–π ‚Äî —Å—Ç–∞–Ω “ë—Ä—É–Ω—Ç—É —Å—Ç–∞–±—ñ–ª—å–Ω–∏–π.")

                explanation.append("<hr>")
                explanation.append("üß™ <b>–§–æ—Ä–º—É–ª—å–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:</b>")
                explanation.append("‚Ä¢ –ù–æ—Ä–º–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å = mean / 255 = {:.2f}".format(brightness / 255))
                explanation.append(
                    "‚Ä¢ –Ü–Ω–¥–µ–∫—Å —Å—É—Ö–æ—Å—Ç—ñ (DryIndex) = —Å–≤—ñ—Ç–ª—ñ - —Ç–µ–º–Ω—ñ –ø—ñ–∫—Å–µ–ª—ñ = {:.2f}%".format(bright - dark))
                explanation.append("‚Ä¢ –ï–Ω—Ç—Ä–æ–ø—ñ—è (Shannon) ‚âà {:.3f}".format(entropy_val))

                self.explanation_box.setHtml("<br>".join(explanation))
                ndvi = 0.25  # –Ø–∫—â–æ –Ω–µ–º–∞—î NIR ‚Äì –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ —è–∫ –∑–∞–≥–ª—É—à–∫—É
                brightness_index = 48.12
                bsi = -0.10

                indices_text = [
                    "üìê <b>–Ü–Ω—Ç–µ–≥—Ä–æ–≤–∞–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏:</b><br>",
                    f"‚Ä¢ NDVI = (NIR - RED) / (NIR + RED) = {ndvi:.2f}",
                    f"‚Ä¢ Brightness Index = ‚àö(R¬≤ + G¬≤) / ‚àö2 = {brightness_index:.2f}",
                    f"‚Ä¢ BSI = (R+G - NIR - B) / (R+G+NIR+B) = {bsi:.2f}"
                ]
                self.index_box.setHtml("<br>".join(indices_text))

                self.tabs.setCurrentIndex(1)

                self.result_label.setText(f"üå± –°—Ç–∞–Ω “ë—Ä—É–Ω—Ç—É: <b>{label.capitalize()}</b>")
                plot_probabilities(probs, classes)
                save_classification_result(self.image_path, label, max(probs))

            except Exception as e:
                msg = CustomMessage(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ü—ñ—ó:\n{str(e)}")
                msg.move(self.x() + 350, self.y() + 250)
                msg.show()
        else:
            msg = CustomMessage("üìÇ –°–ø–æ—á–∞—Ç–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
            msg.move(self.x() + 350, self.y() + 250)
            msg.show()

    def save_report_to_file(self):
        # –û—Ç—Ä–∏–º—É—î–º–æ HTML-–∫–æ–¥ –∑–≤—ñ—Ç—É –∑ QTextBrowser
        html_content = self.report_browser.toHtml()
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É
        file_path, _ = QFileDialog.getSaveFileName(self, "–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç", "", "HTML Files (*.html);;All Files (*)")
        if file_path:
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(html_content)

    def mousePressEvent(self, event):
        if event.button() == Qt.MouseButton.LeftButton:
            self.drag_pos = event.globalPosition().toPoint()

    def mouseMoveEvent(self, event):
        if event.buttons() == Qt.MouseButton.LeftButton:
            self.move(self.pos() + event.globalPosition().toPoint() - self.drag_pos)
            self.drag_pos = event.globalPosition().toPoint()
            event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
